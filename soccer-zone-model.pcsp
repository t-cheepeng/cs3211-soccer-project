/*
 * ========================
 *           MODEL
 * ========================
 * The playing field is modeled as a 2D array with an X-axis (forward-backward) and Y-axis (left-right) value. 
 * N_X = 5 captures the max size of the X-axis and N_Y = 3 captures the max size of the Y-axis.
 * Each element of the 2D array is defined as a Zone. i.e. The playing field (0, 0) is a Zone. 
 * Each team in will consist of 7 player each. (7 vs 7 game)
 * 
 * -----------------------
 *  Visual Representation
 * -----------------------
 *              +=====+=====+=====+=====+=====+
 *              | 0,0 | 1,0 | 2,0 | 3,0 | 4,0 |
 *              +=====+=====+=====+=====+=====+
 * Team0's Goal | 0,1 | 1,1 | 2,1 | 3,1 | 4,1 | Team1's Goal
 *              +=====+=====+=====+=====+=====+
 *              | 0,2 | 1,2 | 2,2 | 3,2 | 4,2 |
 *              +=====+=====+=====+=====+=====+
 *
 * -----------------------
 *     Shared Variables
 * -----------------------
 * team0StartFormationX    - Represents the various start formation of Team0 by setting the number of players in each zone. 
 *                           Zone (0, 1) must have at least one player (acting as the goalkeeper)
 *                           Zone (2, 1) must have at least one player (for kickoff)
 * team1StartFormationX    - Represents the various start formation of Team1 by setting the number of players in each zone. 
 *                           Zone (4, 1) must have at least one player (acting as the goalkeeper)
 *                           Zone (2, 1) must have at least one player (for kickoff)
 * time                    - Represents the number of time units for a game. 
 *                           Once the time reaches 0, the game is over.
 * teamInPossessionOfBall  - Represents the team in possession of the ball. 
 *                           Can only be 0 or 1.
 * ballPosX                - Represents the X-axis position of the ball on the playing field. 
 *                           Can take values from 0 to 4.
 *                           Initial value is not important as it will be set by the KickOff process.
 * ballPosY                - Represents the Y-axis position of the ball on the playing field. 
 *                           Can take values from 0 to 2.
 *                           Initial value is not important as it will be set by the KickOff process.
 * numOfTeam0PlayersInZone - Represents the number of Team0 players on the playing field. 
 *                           Initial value is not important as it will be set equivalent to team0StartFormation by the ResetPlayerPositions process.
 *                           Zone (0, 1) must always have at least one player (acting as the goalkeeper)
 * numOfTeam1PlayersInZone - Represents the number of Team1 players on the playing field. 
 *                           Initial value is not important as it will be set equivalent to team1StartFormation by the ResetPlayerPositions process.
 *                           Zone (4, 1) must always have at least one player (acting as the goalkeeper)
 * score                   - Represents the score of each team. 
 *
 * -----------------------
 *        Processes
 * -----------------------
 * PlayGame()
 * - Represents a full soccer game using the zone model approach as describe earlier.
 *
 * ResetPlayerPositions()
 * - Reset both Teams' position back to their starting formation. 
 *
 * KickOff(teamNum)
 * - Start the game by placing the ball in the middle of the field and giving teamNum the possession of the ball. 
 *
 * TickTock()
 * - Decrement time by one unit and continue to simulate a single action by a single zone.
 * - This process will be called at the end of each action until game is over (time == 0).
 * 
 * Zone(zoneX, zoneY)
 * - Captures both Team0 and Team1 actions that a Zone can perform.
 * - Each zone has a guard clause that checks if the particular zone can act.
 * - A zone can act if there are players in that zone. 
 *
 * Actions(teamNum, zoneX, zoneY)
 * - Captures all actions that a given team can perform in a given Zone.
 * - Each action has a guard clause that checks if the team can perform any actions in the given zone.
 * - A team can perform an action only when the chance of performing at least one action is non-zero
 * - Possible Actions: Shoot, Dribble, Pass, Run
 *
 * Shoot(teamNum, zoneX, zoneY)
 * - Captures the shoot action of a team at the given zone. 
 * 
 * Dribble(teamNum, zoneX, zoneY)
 * - Captures the dribble action of a team at the given zone to some other zone.
 *
 * Pass(teamNum, zoneX, zoneY)
 * - Captures the pass action of a team at the given zone to some other zone.
 * 
 * Run(teamNum, zoneX, zoneY)
 * - Captures the pass action of a team at the given zone to some other zone.
 */

#import "PAT.Lib.SoccerStateHelper";
#import "PAT.Lib.HashTable";

#define timeOver time == 0;
#define N_X 5; // Forward-backward axis
#define N_Y 3; // Sideway axis

// Control variables for experiments
var time = 5;
// Strategy from https://themastermindsite.com/2018/10/15/best-formations-for-7v7/#:~:text=2-3-1,back%20without%20overloading%20defensive%20areas
// 0 -> 2-3-1
// 1 -> 2-1-2-1
// 2 -> 3-1-2
// 3 -> 3-1-1-1
// 4 -> 3-2-1
// Formations with more than 3 are just squashed so that 1st and 2nd number belong in same row(row with goalkeeper) as we only have 5 rows
// Formations can go past halfway line. Don't think that is an issue since even if we start with all players before halfway line, we are going to eventually
// make them spread out to past the halfway line. Save on some state space
hvar team0Strategy = 0;
hvar team1Strategy = 0;

// ========== Formation 0: 2-3-1 ========== //
hvar team0StartFormation0[N_X][N_Y] = [
	0, 1, 0,
	1, 0, 1,
	1, 1, 1,
	0, 1, 0,
	0, 0, 0
];
hvar team1StartFormation0[N_X][N_Y] = [
	0, 0, 0,
	0, 1, 0,
	1, 1, 1,
	1, 0, 1,
	0, 1, 0
];

// ========== Formation 1: 2-1-2-1 ========== //
hvar team0StartFormation1[N_X][N_Y] = [
	1, 1, 1,
	0, 1, 0,
	1, 0, 1,
	0, 1, 0,
	0, 0, 0
];
hvar team1StartFormation1[N_X][N_Y] = [
	0, 0, 0,
	0, 1, 0,
	1, 0, 1,
	0, 1, 0,
	1, 1, 1
];

// ========== Formation 2: 3-1-2 ========== //
hvar team0StartFormation2[N_X][N_Y] = [
	0, 1, 0,
	1, 1, 1,
	0, 1, 0,
	1, 0, 1,
	0, 0, 0
];
hvar team1StartFormation2[N_X][N_Y] = [
	0, 0, 0,
	1, 0, 1,
	0, 1, 0,
	1, 1, 1,
	0, 1, 0
];

// ========== Formation 3: 3-1-1-1 ========== //
hvar team0StartFormation3[N_X][N_Y] = [
	1, 2, 1,
	0, 1, 0,
	0, 1, 0,
	0, 1, 0,
	0, 0, 0
];
hvar team1StartFormation3[N_X][N_Y] = [
	0, 0, 0,
	0, 1, 0,
	0, 1, 0,
	0, 1, 0,
	1, 2, 1
];

// ========== Formation 4: 3-2-1 ========== //
hvar team0StartFormation4[N_X][N_Y] = [
	0, 1, 0,
	1, 1, 1,
	1, 0, 1,
	0, 1, 0,
	0, 0, 0
];
hvar team1StartFormation4[N_X][N_Y] = [
	0, 0, 0,
	0, 1, 0,
	1, 0, 1,
	1, 1, 1,
	0, 1, 0
];

// ========== State Variables ========== //
var teamInPossessionOfBall:{0..1} = 0;
var ballPosX:{0..N_X-1} = 0;
var ballPosY:{0..N_Y-1} = 0;
var numOfTeam0PlayersInZone[N_X][N_Y] = [
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0
];
var numOfTeam1PlayersInZone[N_X][N_Y] = [
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0
];
var score = [0, 0];


// ========== Soccer Match ========== //
// Main game
PlayGame = ResetPlayerPositions; pcase{1: KickOff(0) 1: KickOff(1)}; TickTock;



// ========== Utils Process ========== //
// Reset player positions
ResetPlayerPositions = reset{
	if (team0Strategy == 0) {
		numOfTeam0PlayersInZone = team0StartFormation0;
	} else if (team0Strategy == 1) {
		numOfTeam0PlayersInZone = team0StartFormation1;
	} else if (team0Strategy == 2) {
		numOfTeam0PlayersInZone = team0StartFormation2;
	} else if (team0Strategy == 3) {
		numOfTeam0PlayersInZone = team0StartFormation3;
	} else {
		numOfTeam0PlayersInZone = team0StartFormation4;
	}
	
	if (team1Strategy == 0) {
		numOfTeam1PlayersInZone = team1StartFormation0;
	} else if (team1Strategy == 1) {
		numOfTeam1PlayersInZone = team1StartFormation1;
	} else if (team1Strategy == 2) {
		numOfTeam1PlayersInZone = team1StartFormation2;
	} else if (team1Strategy == 3) {
		numOfTeam1PlayersInZone = team1StartFormation3;
	} else {
		numOfTeam1PlayersInZone = team1StartFormation4;
	}
} -> Skip;

// Kickoff
KickOff(teamNum) = kickOff.teamNum{teamInPossessionOfBall = teamNum; ballPosX = 2; ballPosY = 1;} -> Skip;

// Decrement time and let a single zone perform an action
TickTock = tau{time--} -> ([!timeOver]([]x:{0..N_X-1};y:{0..N_Y-1} @ Zone(x, y)) [] [timeOver] Skip);



// ========== Zone ========== //
Zone(zoneX, zoneY) = 
[call(canZoneAct, numOfTeam0PlayersInZone[zoneX][zoneY] + numOfTeam1PlayersInZone[zoneX][zoneY], zoneX, zoneY, ballPosX, ballPosY)] ([] teamNum:{0..1} @ Actions(teamNum, zoneX, zoneY)); TickTock; // Perform an action for a zone that can act

Actions(teamNum, zoneX, zoneY) = 
[call(canTeamZoneAct, teamNum, zoneX, zoneY, teamInPossessionOfBall, ballPosX, ballPosY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone)] pcase {
	call(shootActionRate  , teamNum, zoneX, zoneY, teamInPossessionOfBall, ballPosX, ballPosY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone) : Shoot  (teamNum, zoneX, zoneY)
	call(dribbleActionRate, teamNum, zoneX, zoneY, teamInPossessionOfBall, ballPosX, ballPosY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone) : Dribble(teamNum, zoneX, zoneY)
	call(passActionRate   , teamNum, zoneX, zoneY, teamInPossessionOfBall, ballPosX, ballPosY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone) : Pass   (teamNum, zoneX, zoneY)
	call(runActionRate    , teamNum, zoneX, zoneY, teamInPossessionOfBall, ballPosX, ballPosY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone) : Run    (teamNum, zoneX, zoneY)
};



// ############################# //
// ========== Actions ========== //
// ############################# //

// ========== Shoots =========== //
Shoot(teamNum, zoneX, zoneY) = pcase {
	call(shootSuccessRate, zoneX, zoneY, teamNum): ShootSuccess(teamNum, zoneX, zoneY)
	call(shootFailRate, zoneX, zoneY, teamNum): ShootFail(teamNum, zoneX, zoneY) 
};

// Success:	Increment score, switch possession, reset player pos
ShootSuccess(teamNum, zoneX, zoneY) = shootSuccess.teamNum.zoneX.zoneY{
	score[teamNum]++; 
} -> ResetPlayerPositions; KickOff(1 - teamNum);

// Fail: Switch possession, start ball at opponent goal zone
ShootFail(teamNum, zoneX, zoneY) = shootFail.teamNum.zoneX.zoneY{
	if (teamNum == 0) {
		teamInPossessionOfBall = 1;
		ballPosX = N_X - 1;
		ballPosY = 1;
	} else {
		teamInPossessionOfBall = 0;
		ballPosX = 0;
		ballPosY = 1;
	}
} -> Skip;



// ========== Dribble ========== //
// Can dribble forward/left/right
Dribble(teamNum, zoneX, zoneY) = 
if (teamNum == 0) {
	if (zoneX == N_X - 1) {
		DribbleTo(teamNum, zoneX, zoneY, zoneX  , zoneY+1) [] 
		DribbleTo(teamNum, zoneX, zoneY, zoneX  , zoneY-1)
	} else {
		DribbleTo(teamNum, zoneX, zoneY, zoneX+1, zoneY  ) [] 
		DribbleTo(teamNum, zoneX, zoneY, zoneX+1, zoneY+1) [] 
		DribbleTo(teamNum, zoneX, zoneY, zoneX+1, zoneY-1)
	}
} else {
	if (zoneX == 0) {
		DribbleTo(teamNum, zoneX, zoneY, zoneX  , zoneY+1) [] 
		DribbleTo(teamNum, zoneX, zoneY, zoneX  , zoneY-1)
	} else {
		DribbleTo(teamNum, zoneX, zoneY, zoneX-1, zoneY  ) []
		DribbleTo(teamNum, zoneX, zoneY, zoneX-1, zoneY+1) [] 
		DribbleTo(teamNum, zoneX, zoneY, zoneX-1, zoneY-1)
	}
}; 
DribbleTo(teamNum, zoneX, zoneY, toZoneX, toZoneY) = [call(canDribbleToZone, teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZoneX, toZoneY)] pcase {
	call(dribbleSuccessRate,teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone): DribbleSuccess(teamNum, zoneX, zoneY, toZoneX, toZoneY)
	call(dribbleFailRate,   teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone): DribblePassFail(teamNum, zoneX, zoneY, toZoneX, toZoneY) 
};

// Success:	advance ball to toZone, advance one player to toZone
DribbleSuccess(teamNum, zoneX, zoneY, toZoneX, toZoneY) = dribbleSuccess.teamNum.zoneX.zoneY.toZoneX.toZoneY{
	ballPosX = toZoneX;
	ballPosY = toZoneY;
	if(teamNum == 0) {
		numOfTeam0PlayersInZone[zoneX][zoneY]--;
		numOfTeam0PlayersInZone[toZoneX][toZoneY]++;
	} else {
		numOfTeam1PlayersInZone[zoneX][zoneY]--;
		numOfTeam1PlayersInZone[toZoneX][toZoneY]++;
	}
} -> Skip;


// ========== Pass ========== //
// Can pass forward to any other zone with teammate
Pass(teamNum, zoneX, zoneY) =
if (teamNum == 0) {
	[] toZoneX:{zoneX..N_X-1};toZoneY:{0..N_Y-1} @ PassTo(teamNum, zoneX, zoneY, toZoneX, toZoneY)
} else {
	[] toZoneX:{0..zoneX};toZoneY:{0..N_Y-1} @ PassTo(teamNum, zoneX, zoneY, toZoneX, toZoneY)
};

PassTo(teamNum, zoneX, zoneY, toZoneX, toZoneY) = [call(canPassToZone, teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZoneX, toZoneY)] pcase {
	call(passSuccessRate, teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZoneX, toZoneY): PassSuccess(teamNum, zoneX, zoneY, toZoneX, toZoneY)
	call(passFailRate   , teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZoneX, toZoneY): DribblePassFail(teamNum, zoneX, zoneY, toZoneX, toZoneY) 
};

// Success: ball position change
PassSuccess(teamNum, zoneX, zoneY, toZoneX, toZoneY) = passSuccess.teamNum.zoneX.zoneY.toZoneX.toZoneY{
	ballPosX = toZoneX;
	ballPosY = toZoneY;
} -> Skip;

// ========== Dirbble/Pass Common Event ========== //
// Fail: Switch possession and transfer ball to some random player in opposing team
DribblePassFail(teamNum, zoneX, zoneY, toZoneX, toZoneY) = dribblePassFail.teamNum.zoneX.zoneY.toZoneX.toZoneY{
	var newBallPos = call(findNearestPlayerToTakeBall, teamInPossessionOfBall, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone);
 	ballPosX = newBallPos[0];
 	ballPosY = newBallPos[1];
	if(teamNum == 0) {
		teamInPossessionOfBall = 1;
	} else {
		teamInPossessionOfBall = 0;
	}
} -> Skip;



// =========== Run ============ //
// Can only run forward/left/right
Run(teamNum, zoneX, zoneY) = 
if (teamNum == 0) {
	if (zoneX == N_X - 1) {
		RunTo(teamNum, zoneX, zoneY, zoneX  , zoneY+1) [] 
		RunTo(teamNum, zoneX, zoneY, zoneX  , zoneY-1)
	} else {
		RunTo(teamNum, zoneX, zoneY, zoneX+1, zoneY  ) [] 
		RunTo(teamNum, zoneX, zoneY, zoneX+1, zoneY+1) [] 
		RunTo(teamNum, zoneX, zoneY, zoneX+1, zoneY-1)
	}
} else {
	if (zoneX == 0) {
		RunTo(teamNum, zoneX, zoneY, zoneX  , zoneY+1) [] 
		RunTo(teamNum, zoneX, zoneY, zoneX  , zoneY-1)
	} else {
		RunTo(teamNum, zoneX, zoneY, zoneX-1, zoneY  ) []
		RunTo(teamNum, zoneX, zoneY, zoneX-1, zoneY+1) [] 
		RunTo(teamNum, zoneX, zoneY, zoneX-1, zoneY-1)
	}
}; 
RunTo(teamNum, zoneX, zoneY, toZoneX, toZoneY) = [call(canRunToZone, teamNum, zoneX, zoneY, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZoneX, toZoneY)] runSuccess.teamNum.zoneX.zoneY.toZoneX.toZoneY {
	if (teamNum == 0) {
		numOfTeam0PlayersInZone[zoneX][zoneY]--;
		numOfTeam0PlayersInZone[toZoneX][toZoneY]++;
	} else {
		numOfTeam1PlayersInZone[zoneX][zoneY]--;
		numOfTeam1PlayersInZone[toZoneX][toZoneY]++;
	}
} -> Skip;

// ========== Verifications ========== //
#define team0Win timeOver && score[0] > score[1] ;
#define team1Win timeOver && score[0] < score[1];
#define draw     timeOver && score[0] == score[0];

#assert PlayGame deadlockfree;
#assert PlayGame reaches team0Win with prob;
#assert PlayGame reaches team1Win with prob;
#assert PlayGame reaches draw with prob;
#assert PlayGame reaches timeOver with prob;