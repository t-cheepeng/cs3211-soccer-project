// Model
// =============================
// |             |             |             
// |      0      |      1      |
// |             |             |
// =============================
// Instead of modelling players, we model zones on the field
// Each zone can have any number of players from either team
// Two Players only
// No goalkeeper
// Shoot and Dribble and Run Completed
// At each timestep (by time hidden variable), only one zone will take action
// The process always goes from Zone# -> Zone#Actions -> Zone#Team#Actions -> Loop Back
// Zone#: Guard against zones with no players and time over
// Zone#Actions: Choose what team gets to take actions in the zone#
// Zone#Team#Actions: Team# actual actions in Zone#
// Loop Back: Choose which Zone# gets to be active

#define timeOver time == 0;
// This should change once we allow running when players don't have the ball
#define isTeam0InPossession teamInPossessionOfBall == 0;
#define isTeam1InPossession teamInPossessionOfBall == 1;

#define doesTeam0HaveBallInZone0 isTeam0InPossession && ballInZone == 0; 
#define doesTeam0HavePlayersInZone0 numOfTeam0PlayersInZone[0] > 0;
#define doesTeam0HaveBallInZone1 isTeam0InPossession && ballInZone == 1;
#define doesTeam0HavePlayersInZone1 numOfTeam0PlayersInZone[1] > 0;

#define doesTeam1HaveBallInZone0 isTeam1InPossession && ballInZone == 0; 
#define doesTeam1HavePlayersInZone0 numOfTeam1PlayersInZone[0] > 0;
#define doesTeam1HaveBallInZone1 isTeam1InPossession && ballInZone == 1;
#define doesTeam1HavePlayersInZone1 numOfTeam1PlayersInZone[1] > 0;

// Some player must be in a zone and time not over in order for the zone to be active
#define canZone0Act numOfTeam0PlayersInZone[0] + numOfTeam1PlayersInZone[0] > 0 && !timeOver;
#define canZone1Act numOfTeam0PlayersInZone[1] + numOfTeam1PlayersInZone[1] > 0 && !timeOver;

var teamInPossessionOfBall:{0..1} = 0;
var ballInZone:{0..1} = 0;
var numOfTeam0PlayersInZone[2] = [1,0];
var numOfTeam1PlayersInZone[2] = [0,1];
var team0Score = 0;
var team1Score = 0;
hvar time = 4;



// ========== Zone 0 ========== //
Zone0 = [canZone0Act] Zone0Actions [] [timeOver] Skip;
Zone0Actions = Zone0Team0Actions [] Zone0Team1Actions;

Zone0Team0Actions = 
	[doesTeam0HaveBallInZone0 && doesTeam0HavePlayersInZone0] pcase {
	1: zone0team0shoot{team0Score++; teamInPossessionOfBall=1; ballInZone=1;} -> ResetPlayerPositions
	1: zone0team0dribble{ballInZone=1; numOfTeam0PlayersInZone[0]--; numOfTeam0PlayersInZone[1]++;} -> TickTock
	}
	[] [doesTeam0HavePlayersInZone0 && !doesTeam0HaveBallInZone0] zone0team0run{numOfTeam0PlayersInZone[0]--; numOfTeam0PlayersInZone[1]++;} -> TickTock;

Zone0Team1Actions = [doesTeam1HaveBallInZone0 && doesTeam1HavePlayersInZone0] pcase {
 	1: zone0team1shoot{team1Score++; teamInPossessionOfBall=0; ballInZone=0;} -> ResetPlayerPositions
};



// ========== Zone 1 ========== //
Zone1 =  [canZone1Act] Zone1Actions [] [timeOver] Skip;
Zone1Actions = Zone1Team0Actions [] Zone1Team1Actions;

Zone1Team0Actions = [doesTeam0HaveBallInZone1 && doesTeam0HavePlayersInZone1] pcase {
	1: zone1team0shoot{team0Score++; teamInPossessionOfBall=1; ballInZone=1;} -> ResetPlayerPositions
};

Zone1Team1Actions = [doesTeam1HaveBallInZone1 && doesTeam1HavePlayersInZone1] pcase {
	1: zone1team1shoot{team1Score++; teamInPossessionOfBall=0; ballInZone=0;} -> ResetPlayerPositions
	1: zone1team1dribble{ballInZone=0; numOfTeam1PlayersInZone[0]++; numOfTeam1PlayersInZone[1]--;} -> TickTock
	} 
	[] [doesTeam1HavePlayersInZone1 && !doesTeam1HaveBallInZone1] zone1team1run{numOfTeam1PlayersInZone[0]++; numOfTeam1PlayersInZone[1]--;} -> TickTock;


// ========== Soccer Match ========== //
// Starting kickoff can be either team
Whokickoff = pcase {
	1: team0kickoff{teamInPossessionOfBall = 0; ballInZone=0;} -> Skip
	1: team1kickoff{teamInPossessionOfBall = 1; ballInZone=1;} -> Skip
};
PlayGame = Whokickoff; (TickTock);
TickTock = timed{time--} -> (Zone0 [] Zone1);
ResetPlayerPositions = resetpositions{numOfTeam0PlayersInZone[0]=1; numOfTeam0PlayersInZone[1]=0; numOfTeam1PlayersInZone[0]=0; numOfTeam1PlayersInZone[1]=1;} -> TickTock;


// ========== Verifications ========== //
#define team0Win team0Score > team1Score && timeOver;
#define team1Win team0Score < team1Score && timeOver;
#define draw team0Score == team1Score && timeOver;

#assert PlayGame reaches team0Win with prob;
#assert PlayGame reaches team1Win with prob;
#assert PlayGame reaches draw with prob;