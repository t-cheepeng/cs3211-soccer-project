// TODO List (In order of priority, Highest -> Lowest):
// 1. Have some C# Helper class to check all the defined things. ABSTRACTION
// 2. Model failures of shoot, dribble, run and pass
// 3. Model backward actions 
// 4. Assign probabilities to success/failure. Probably do this with a C# Helper class again
// 5. Expand to larger number of zones and larger number of players

// Model
// =============================
// |             |             |             
// |      0      |      1      |
// |             |             |
// =============================
// Instead of modelling players, we model zones on the field
// Each zone can have any number of players from either team
// Two Players only
// No goalkeeper
// Players are not allowed to perform actions backwards(ie. all actions move in one direction, from 0 -> 1 or 1 -> 0) for now
// Successful Shoot and Dribble and Run and Pass completed
// At each timestep (by time hidden variable), only one zone will take action
// The process always goes from Zone# -> Zone#Actions -> Zone#Team#Actions -> Loop Back
// Zone#: Guard against zones with no players and time over
// Zone#Actions: Choose what team gets to take actions in the zone#
// Zone#Team#Actions: Team# actual actions in Zone#
// Loop Back: Choose which Zone# gets to be active

#import "PAT.Lib.SoccerStateHelper";

#define timeOver time == 0;
#define N 4; // Number of zones

var teamInPossessionOfBall:{0..1} = 0;
var ballInZone:{0..N-1} = 0;
var numOfTeam0PlayersInZone[N] = [2, 0, 0, 0];
var numOfTeam1PlayersInZone[N] = [0, 0, 0, 2];
var score = [0, 0];
var time = 10;

// ========== Soccer Match ========== //
// Main game
PlayGame = KickOff; (TickTock);

// ========== Utils Process ========== //
// Starting kickoff can be either team
KickOff = pcase {
	1: team0kickoff{teamInPossessionOfBall = 0; ballInZone=0;} -> Skip
	1: team1kickoff{teamInPossessionOfBall = 1; ballInZone=1;} -> Skip
};

// Decrement time and let a single zone perform an action
TickTock = timed{time--} -> ([]i:{0..N-1} @ Zone(i));

// Reset player positions
ResetPlayerPositions = resetpositions{
	numOfTeam0PlayersInZone[0]=2; 
	numOfTeam0PlayersInZone[1]=0; 
	numOfTeam0PlayersInZone[2]=0; 
	numOfTeam0PlayersInZone[3]=0; 
	numOfTeam1PlayersInZone[0]=0; 
	numOfTeam1PlayersInZone[1]=0;
	numOfTeam1PlayersInZone[2]=0; 
	numOfTeam1PlayersInZone[3]=2;
} -> Skip;

// ========== Zone ========== //
Zone(zoneNum) = 
[call(canZoneAct, numOfTeam0PlayersInZone[zoneNum] + numOfTeam1PlayersInZone[zoneNum], time)] ([] teamNum:{0..1} @ Actions(teamNum, zoneNum)); TickTock // Perform an action for a zone that can act
[] 
[timeOver] Skip; // End if time is over

Actions(teamNum, zoneNum) = 
[call(canTeamZoneAct, teamNum, zoneNum, teamInPossessionOfBall, ballInZone, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone)] pcase {
		call(shootActionRate, teamNum, zoneNum, teamInPossessionOfBall, ballInZone, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone)  : Shoot(teamNum, zoneNum)
		call(dribbleActionRate, teamNum, zoneNum, teamInPossessionOfBall, ballInZone, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone): Dribble(teamNum, zoneNum)
		call(passActionRate, teamNum, zoneNum, teamInPossessionOfBall, ballInZone, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone)   : Pass(teamNum, zoneNum)
		call(runActionRate, teamNum, zoneNum, teamInPossessionOfBall, ballInZone, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone)    : Run(teamNum, zoneNum)
};



// ############################# //
// ========== Actions ========== //
// ############################# //

// ========== Shoots =========== //
Shoot(teamNum, zoneNum) = pcase {
	call(shootSuccessRate): ShootSuccess(teamNum, zoneNum)
	call(shootFailRate)   : ShootFail(teamNum, zoneNum) 
};

// Success:	Increment score, switch possession, reset player pos
ShootSuccess(teamNum, zoneNum) = shootSuccess.teamNum.zoneNum{
	score[teamNum]++; 
	if (teamNum == 0) {
		teamInPossessionOfBall = 1;
		ballInZone = N - 1;
	} else {
		teamInPossessionOfBall = 0;
		ballInZone = 0;
	}
} -> ResetPlayerPositions;

// Fail: Switch possession, start ball at opponent goal zone
ShootFail(teamNum, zoneNum) = shootFail.teamNum.zoneNum{
	if (teamNum == 0) {
		teamInPossessionOfBall = 1;
		ballInZone = N - 1;
	} else {
		teamInPossessionOfBall = 0;
		ballInZone = 0;
	}
} -> Skip;



// ========== Dribble ========== //
// Can dribble forward or backward
Dribble(teamNum, zoneNum) = DribbleTo(teamNum, zoneNum, zoneNum+1) [] DribbleTo(teamNum, zoneNum, zoneNum-1);
DribbleTo(teamNum, zoneNum, toZone) = [call(canDribbleToZone, teamNum, zoneNum, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZone)] pcase {
	call(dribbleSuccessRate)                                                                 : DribbleSuccess(teamNum, zoneNum, toZone)
	call(dribbleFailRate, teamNum, zoneNum, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone): DribbleFail(teamNum, zoneNum, toZone) 
};

// Success:	advance ball to toZone, advance one player to toZone
DribbleSuccess(teamNum, zoneNum, toZone) = dribbleSuccess.teamNum.zoneNum.toZone{
	if(teamNum == 0) {
		ballInZone = toZone;
		numOfTeam0PlayersInZone[zoneNum]--;
		numOfTeam0PlayersInZone[toZone]++;
	} else {
		ballInZone = toZone;
		numOfTeam1PlayersInZone[zoneNum]--; 
		numOfTeam1PlayersInZone[toZone]++;
	}
} -> Skip;

// Fail: switch possession
DribbleFail(teamNum, zoneNum, toZone) = dribbleFail.teamNum.zoneNum.toZone{
	if(teamNum == 0) {
		teamInPossessionOfBall = 1;
	} else {
		teamInPossessionOfBall = 0;
	}
} -> Skip;



// ========== Pass ========== //
// Can pass to any other zone with teammate
Pass(teamNum, zoneNum) = [] toZone:{0..N-1} @ PassTo(teamNum, zoneNum, toZone);
PassTo(teamNum, zoneNum, toZone) = [call(canPassToZone, teamNum, zoneNum, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZone)] pcase {
	call(passSuccessRate)                                                                 : PassSuccess(teamNum, zoneNum, toZone)
	call(passFailRate, teamNum, zoneNum, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone): PassFail(teamNum, zoneNum, toZone) 
};

// Success: ball position change
PassSuccess(teamNum, zoneNum, toZone) = passSuccess.teamNum.zoneNum.toZone{
	ballInZone = toZone;
} -> Skip;

// Fail: switch possession
PassFail(teamNum, zoneNum, toZone) = passFail.teamNum.zoneNum.toZone{
	if(teamNum == 0) {
		teamInPossessionOfBall = 1;
	} else {
		teamInPossessionOfBall = 0;
	}
} -> Skip;



// =========== Run ============ //
// Can run forward or backward
Run(teamNum, zoneNum) = RunTo(teamNum, zoneNum, zoneNum+1) [] RunTo(teamNum, zoneNum, zoneNum-1);
RunTo(teamNum, zoneNum, toZone) = [call(canRunToZone, teamNum, zoneNum, numOfTeam0PlayersInZone, numOfTeam1PlayersInZone, toZone)] runSuccess.teamNum.zoneNum {
	if (teamNum == 0) {
		numOfTeam0PlayersInZone[zoneNum]--;
		numOfTeam0PlayersInZone[toZone]++;
	} else {
		numOfTeam1PlayersInZone[zoneNum]--;
		numOfTeam1PlayersInZone[toZone]++;
	}
} -> Skip;

// ========== Verifications ========== //
#define team0Win score[0] > score[1] && timeOver;
#define team1Win score[0] < score[1] && timeOver;
#define draw     score[0] == score[0] && timeOver;

#assert PlayGame deadlockfree;
#assert PlayGame reaches team0Win with prob;
#assert PlayGame reaches team1Win with prob;
#assert PlayGame reaches draw with prob;
#assert PlayGame reaches timeOver with prob;